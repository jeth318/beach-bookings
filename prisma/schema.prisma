// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    accounts      Account[]
    sessions      Session[]
    emailConsents String[]  @default(["DELETE", "LEAVE", "JOIN", "KICK", "MODIFY"])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Booking {
    id            String       @id
    players       String[]
    date          DateTime
    duration      Int          @default(90)
    court         String?
    maxPlayers    Int?         @default(4)
    facility      Facility?    @relation(fields: [facilityId], references: [id])
    association   Association? @relation(fields: [associationId], references: [id])
    userId        String
    private       Boolean      @default(true)
    associationId String?
    facilityId    String?
    joinable      Boolean      @default(true)
}

model Association {
    id          String    @id
    name        String    @unique
    description String?
    admins      String[]
    members     String[]
    private     Boolean   @default(true)
    userId      String
    Booking     Booking[]
}

model Facility {
    id          String    @id
    name        String    @unique
    description String?
    address     String?
    city        String
    private     Boolean   @default(true)
    durations   String[]
    lon         String?
    lat         String?
    courts      String[]
    userId      String
    Booking     Booking[]
}
